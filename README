%quickref - короткая инфа о IPython
https://ipython.readthedocs.io/en/stable/index.html - Доки по питону
https://pyformat.info/ - Все о форматировании
https://docs.python.org/3/library/string.html#format-string-syntax Еще о форматировании

------для автостарта в Deepin--------
/usr/share/applications

-
%autocall:
    Make functions callable without having to type parentheses.
%autoindent:
    Toggle autoindent on/off (deprecated)

------количество символов------
In [2]: print('-' * 30)
------------------------------

---------Перебор словаря------------
In [15]: for key, value in r1.items():
    ...:     print(key + ' => '+ value)
    ...:     
IOS => 15.4
IP => 10.255.0.1
hostname => london_r1
model => 4451

----------Цикл в цикле-------------------------
In [18]: commands = ['switchport mode access', 'spanning-tree portfast', 'spanning-tree bpduguard enabl
    ...: e']
In [19]: fast_int = ['0/1','0/3','0/4','0/7','0/9','0/10','0/11']
In [20]: for intf in fast_int:
    ...:     print('interface {}'.format(intf))
    ...:     for command in commands:
    ...:         print(' {}'.format(command))


----------для питона ----------------
$ sudo pip3 install ipython
For run the installed iPython for the Python 3 use:
$ python3 `which ipython3`

---Округление до двух знаков -----------
In [8]: round(10/3.0, 2)
Out[8]: 3.33

---преобразование заглавной буквы -------

In [74]: string2 = 'tunnel 0'

In [75]: string2.capitalize()
Out[75]: 'Tunnel 0'

In [76]: string1.capitalize()
Out[76]: 'Fastethernet'

--------Отступы после каждого параметра-------------------
In [5]: vlan, mac, intf = ['100', 'aabb.cc80.7000', 'G10/1']
In [6]: print("{:>15} {:>15} {:>15}".format(vlan, mac, intf) )
            100  aabb.cc80.7000           G10/1

-----Сколько цифр выводить после запятой---------------------
In [21]: print("{:.3f}".format(10.0/3) )
3.333

In [8]: print("%.3f" % (10.0/3))
3.333

------Задаем имена заменяемым параметрам-----------------------
In [24]: '{ip}/{mask}'.format(mask=24, ip='10.1.1.1')
Out[24]: '10.1.1.1/24'

In [27]: '{1}/{0}'.format(24, '10.1.1.1')
Out[27]: '10.1.1.1/24'


------------Можно не повторять передачу параметров ----------------
In [21]: ip_template = '''
    ...: IP address:
    ...: {0:<8} {1:<8} {2:<8} {3:<8}
    ...: {0:08b} {1:08b} {2:08b} {3:08b}
    ...: '''

In [22]: print(ip_template.format(192, 100, 1, 1))

IP address:
192      100      1        1
11000000 01100100 00000001 00000001

------------------Join Одна строка с разделителем -------------------
In [16]: vlans = ['10', '20', '30']
In [17]: ','.join(vlans)
Out[17]: '10,20,30'

----------------- Генератор списков -------------------------------
In [79]: list2 = ['FastEthernet0/'+ str(i) for i in range(10)]
In [80]: list2
Out[80]: 
['FastEthernet0/0',
 'FastEthernet0/1',
 'FastEthernet0/2',
 'FastEthernet0/3',
 'FastEthernet0/4',
 'FastEthernet0/5',
 'FastEthernet0/6',
 'FastEthernet0/7',
 'FastEthernet0/8',
 'FastEthernet0/9']

In [81]: 

----------------------Добавляем новую пару ключ-значение---------------------
In [4]: london['vendor'] = 'Cisco'
In [5]: print(london)
{'vendor': 'Cisco', 'name': 'London1', 'location': 'London Str'}


------------Метод Get в словаре------------------------
Метод get() запрашивает ключ и, если его нет, вместо ошибки возвращает None.
In [18]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}
In [19]: print(london.get('ios'))
None
Метод get() позволяет также указывать другое значение вместо None:
In [20]: print(london.get('ios', 'Ooops'))
Ooops

----------словарь keys, values, items -----------------------------------------
In [157]: london.keys()
Out[157]: dict_keys(['name', 'location', 'vendor', 'n'])

In [158]: london.values()
Out[158]: dict_values(['London1', 'London Str', 'Cisco', None])

In [159]: london.items()
Out[159]: dict_items([('name', 'London1'), ('location', 'London Str'), ('vendor', 'Cisco'), ('n', None)])


-----------------------Литерал, Словарь------------------------
In [1]: r1 = {'model':'4451', 'ios':'15.4'}
In [2]: r1
Out[2]: {'model': '4451', 'ios': '15.4'}
In [3]: r1 = dict(model='4451', ios = '15.4')
In [4]: r1
Out[4]: {'model': '4451', 'ios': '15.4'}
In [5]: r1 = dict([('model','4451'),('ios','15.4')])
In [6]: r1
Out[6]: {'model': '4451', 'ios': '15.4'}
In [7]: d_keys = ['hostname', 'location', 'vendor', 'model', 'ios', 'ip']
In [8]: r1 = dict.fromkeys(d_keys)
In [9]: r1
Out[9]: 
{'hostname': None,
 'location': None,
 'vendor': None,
 'model': None,
 'ios': None,
 'ip': None}
In [10]: r1 = dict.fromkeys(d_keys,0)
In [11]: r1
Out[11]: {'hostname': 0, 'location': 0, 'vendor': 0, 'model': 0, 'ios': 0, 'ip': 0}

-------------------Генертор словаря ----------------------------
In [13]: router_models = ['ISR2811', 'ISR2911', 'ISR2921', 'ASR9002']
In [14]: routers = {key:[] for key in router_models}
In [15]: routers
Out[15]: {'ISR2811': [], 'ISR2911': [], 'ISR2921': [], 'ASR9002': []}
In [16]: routers['ASR9002'].append('london_r1')
In [17]: routers
Out[17]: {'ISR2811': [], 'ISR2911': [], 'ISR2921': [], 'ASR9002': ['london_r1']}

----------------Создание кортежа ------------------
In [19]: tuple1= tuple()
In [20]: tuple1
Out[20]: () #Пустой кортеж
In [21]: tuple2 = ('password',)
In [22]: tuple2
Out[22]: ('password',) #обратить внимание на запятую
In [23]: list_keys = ['hostname', 'location', 'vendor', 'model', 'IOS', 'IP']
In [24]: tuple_keys = tuple(list_keys)
In [25]: tuple_keys
Out[25]: ('hostname', 'location', 'vendor', 'model', 'IOS', 'IP') #Кортеж из списка
In [26]: tuple_keys[0]
Out[26]: 'hostname' #Обращение к значению кортежа

--------------Создание множества -----------------------
In [28]: vlans = [10, 20, 30, 40, 50, 60, 70, 100, 10]
In [29]: set(vlans)
Out[29]: {10, 20, 30, 40, 50, 60, 70, 100}

In [32]: set1 = set(vlans)
In [33]: set1
Out[33]: {10, 20, 30, 40, 50, 60, 70, 100}
In [34]: set1.add(40)
In [35]: set1
Out[35]: {10, 20, 30, 40, 50, 60, 70, 100}

In [36]: set1.discard(51) #Удаление без вывода ошибки
In [37]: set1.discard(50)
In [38]: set1
Out[38]: {10, 20, 30, 40, 60, 70, 100}

------------------Объединение и пересечения множеств -------------------------
In [44]: vlans1 = {10,20,30,40}
In [45]: vlans2 = {100,101,102,30,20}
In [46]: vlans1.union(vlans2) #Объединение множеств или через знак |
Out[46]: {10, 20, 30, 40, 100, 101, 102}

In [47]: vlans1.intersection(vlans2) #Пересечение множеств
Out[47]: {20, 30}
In [48]: vlans1 & vlans2 #Пересечение множеств
Out[48]: {20, 30}

-----------------Преобразование типов -----------------------------
In [60]: list("string") #Преобразование строки в список
Out[60]: ['s', 't', 'r', 'i', 'n', 'g']

In [61]: set([1,2,3,3,4,4,4,4]) #Преобразование во множество
Out[61]: {1, 2, 3, 4}

In [62]: tuple([1,2,3,4]) #Преобразование в кортеж
Out[62]: (1, 2, 3, 4)

In [63]: str(10) #Преобразование числа в строку
Out[63]: '10'
In [64]: ','.join([ str(vlan) for vlan in vlans ]) #Преобразование числе в строки
Out[64]: '10,20,30,40,50,60,70,100,10'

------------------Преобразование строки в число --------------
In [71]: [int(vlan) for vlan in vlans if vlan.isdigit()]
Out[71]: [10, 20, 30, 40]

------------Проверка строки на числа и буквы-----------------------
In [73]: "a".isalpha() #Проверяет состоит ли строка из  одних букв
Out[73]: True
In [74]: "a100".isalpha()
Out[74]: False

In [75]: "a100".isalnum() #Проверяет состоит ли строка из букв и цифр
Out[75]: True
In [76]: "a".isalnum()
Out[76]: True

--------------------File read --------------------

read() - считывает содержимое файла в строку
readline() - считывает файл построчно
readlines() - считывает строки файла и создает список из строк


In [1]: f = open('r1.txt')
In [2]: f.read()
Out[2]: '!\nservice timestamps debug datetime msec localtime show-timezone year\nservice timestamps log datetime msec localtime show-timezone year\nservice password-encryption\nservice sequence-numbers\n!\nno ip domain lookup\n!\nip ssh version 2\n!\n'
In [3]: f.read()
Out[3]: ''

In [4]: f = open('r1.txt')
In [5]: f.readline()
Out[5]: '!\n'
In [6]: f.readline()
Out[6]: 'service timestamps debug datetime msec localtime show-timezone year\n'

In [7]: f = open('r1.txt')
In [8]: for line in f:
   ...:     print(line)
   ...:


In [9]: f = open('r1.txt')
In [10]: f.readlines()
Out[10]:
['!\n',
 'service timestamps debug datetime msec localtime show-timezone year\n',
 'service timestamps log datetime msec localtime show-timezone year\n',
 'service password-encryption\n',
 'service sequence-numbers\n',
 '!\n',
 'no ip domain lookup\n',
 '!\n',
 'ip ssh version 2\n',
 '!\n']


Чтобы ещё раз считать информацию из файла, нужно воспользоваться методом seek, который перемещает курсор в необходимое положение.
In [18]: f.seek(0)


---------------Запись в файл--------------------

w - открыть файл для записи. Если файл существует, то его содержимое удаляется

a - открыть файл для дополнения записи. Данные добавляются в конец файла

При этом, оба режима создают файл, если он не существует

Для записи в файл используются такие методы:

write() - записать в файл одну строку
writelines() - позволяет передавать в качестве аргумента список строк


In [2]: f = open('r2.txt', 'w')

In [3]: cfg_lines_as_string = '\n'.join(cfg_lines)
In [4]: cfg_lines_as_string
Out[4]: '!\nservice timestamps debug datetime msec localtime show-timezone year\nservice timestamps log datetime msec localtime show-timezone year\nservice password-encryption\nservice sequence-numbers\n!\nno ip domain lookup\n!\nip ssh version 2\n!'
In [5]: f.write(cfg_lines_as_string)
In [7]: f.close()


In [1]: cfg_lines = ['!',
   ...:  'service timestamps debug datetime msec localtime show-timezone year',
   ...:  'service timestamps log datetime msec localtime show-timezone year',
   ...:  'service password-encryption',
   ...:  'service sequence-numbers',
   ...:  '!',
   ...:  'no ip domain lookup',
   ...:  '!',
   ...:  'ip ssh version 2',
   ...:  '!']
In [9]: f = open('r2.txt', 'w')
In [10]: f.writelines(cfg_lines)
In [11]: f.close()
In [12]: cat r2.txt
!service timestamps debug datetime msec localtime show-timezone yearservice timestamps log datetime msec localtime show-timezone yearservice password-encryptionservice sequence-numbers!no ip domain lookup!ip ssh version 2!

cfg_lines3 = [ line + '\n' for line in cfg_lines ]
In [18]: f = open('r2.txt', 'w')
In [19]: f.writelines(cfg_lines3)
In [20]: f.close()
In [21]: cat r2.txt
!
service timestamps debug datetime msec localtime show-timezone year
service timestamps log datetime msec localtime show-timezone year
service password-encryption
service sequence-numbers
!
no ip domain lookup
!
ip ssh version 2
!


-------------------Закрытие файла------------------------------
In [9]: try:
  ....:     f = open('r1.txt', 'r')
  ....:     print(f.read())
  ....: except IOError:
  ....:     print('No such file')
  ....: finally:
  ....:     f.close()
  ....:
!

------------------Конструкция with--------------------------------

In [1]: with open('r1.txt', 'r') as f:
  ....:     for line in f:
  ....:         print(line)
  ....:
!

----------------Работа с двумя файлами---------------------------------
In [5]: with open('r1.txt') as src, open('result.txt', 'w') as dest:
   ...:     for line in src:
   ...:         if line.startswith('service'):
   ...:             dest.write(line)
   ...:

In [6]: cat result.txt
service timestamps debug datetime msec localtime show-timezone year
service timestamps log datetime msec localtime show-timezone year
service password-encryption
service sequence-numbers

--------------Присвоение нескольким переменным--------------
Нижнее подчеркивание можно использовать несколкьо раз если эту переменную не собираемся использовать в дальнейшем
In [13]: dhcp = '00:09:BB:3D:D6:58   10.1.10.2        86250       dhcp-snooping   10    FastEthernet0/1'
In [14]: mac, ip, _, _, vlan, intf = dhcp.split()

Использование звездочки в присвоении переменных
In [18]: vlans = [10, 11, 13, 30]
In [19]: first, *rest = vlans
In [20]: first
Out[20]: 10
In [21]: rest
Out[21]: [11, 13, 30]


---------------пример распаковки в цикле for--------------------
access_template = ['switch mode access',
                   'switchport access vlan',
                   'spanning-tree']
access = {'0/12':10,
          '0/14':11,
          '0/16':17}
for intf in access:
    print('interface FastEthernet' + intf)
    for command in access_template:
        if command.endswith('spanning-tree'):
            print(' {} {}'.format(command, access[intf]))
        else:
            print(' {}'.format(command))

interface FastEthernet0/12
 switch mode access
 switchport access vlan
 spanning-tree 10
interface FastEthernet0/14
 switch mode access
 switchport access vlan
 spanning-tree 11
interface FastEthernet0/16
 switch mode access
 switchport access vlan
 spanning-tree 17


table = [['100', 'a1b2.ac10.7000', 'DYNAMIC', 'Gi0/1'],
 ['200', 'a0d4.cb20.7000', 'DYNAMIC', 'Gi0/2'],
 ['300', 'acb4.cd30.7000', 'DYNAMIC', 'Gi0/3'],
 ['100', 'a2bb.ec40.7000', 'DYNAMIC', 'Gi0/4'],
 ['500', 'aa4b.c550.7000', 'DYNAMIC', 'Gi0/5'],
 ['200', 'a1bb.1c60.7000', 'DYNAMIC', 'Gi0/6'],
 ['300', 'aa0b.cc70.7000', 'DYNAMIC', 'Gi0/7']]
for line in table:
    vlan, mac, _,intf = line
    print(vlan, mac, intf)

100 a1b2.ac10.7000 Gi0/1
200 a0d4.cb20.7000 Gi0/2
300 acb4.cd30.7000 Gi0/3
100 a2bb.ec40.7000 Gi0/4
500 aa4b.c550.7000 Gi0/5
200 a1bb.1c60.7000 Gi0/6
300 aa0b.cc70.7000 Gi0/7





--------------------------------------------------------------------
Утилита показывающая в терминале находишься ли ты в репозитории
--------------------------------------------------------------------
Это дополнительный функционал, который не требуется для работы с Git, но очень помогает в этом. При работе с Git очень удобно, когда можно сразу определить, находитесь Вы в обычном каталоге или в репозитории Git. Кроме того, было бы хорошо понимать статус текущего репозитория. Для этого нужно установить специальную утилиту, которая будет показывать статус репозитория. Для установки утилиты, надо скопировать её репозиторий в домашний каталог пользователя, под которым Вы работаете:

cd ~
git clone https://github.com/magicmonty/bash-git-prompt.git .bash-git-prompt --depth=1
А затем добавить в конец файла .bashrc такие строки:

GIT_PROMPT_ONLY_IN_REPO=1
source ~/.bash-git-prompt/gitprompt.sh

------------------------------------------------------------------------------------


from pprint import pprint


def filter_file_lines(filename, substring):
    result = []
    with open(filename) as f:
        for line in f:
            if substring in line:
                result.append(line)
    return result


if __name__ == "__main__": # Выполнять функцию только если скрипт вызывается на прямую
    pprint(filter_file_lines('config_r1.txt', 'ip address'))
--------------------------------------------------------------------



























