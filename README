%quickref - короткая инфа о IPython
https://ipython.readthedocs.io/en/stable/index.html - Доки по питону
https://pyformat.info/ - Все о форматировании

%autocall:
    Make functions callable without having to type parentheses.
%autoindent:
    Toggle autoindent on/off (deprecated)


----------для питона ----------------
$ sudo pip3 install ipython
For run the installed iPython for the Python 3 use:
$ python3 `which ipython3`

---Округление до двух знаков -----------
In [8]: round(10/3.0, 2)
Out[8]: 3.33

---преобразование заглавной буквы -------

In [74]: string2 = 'tunnel 0'

In [75]: string2.capitalize()
Out[75]: 'Tunnel 0'

In [76]: string1.capitalize()
Out[76]: 'Fastethernet'

--------Отступы после каждого параметра-------------------
In [5]: vlan, mac, intf = ['100', 'aabb.cc80.7000', 'G10/1']
In [6]: print("{:>15} {:>15} {:>15}".format(vlan, mac, intf) )
            100  aabb.cc80.7000           G10/1

-----Сколько цифр выводить после запятой---------------------
In [21]: print("{:.3f}".format(10.0/3) )
3.333

In [8]: print("%.3f" % (10.0/3))
3.333

------Задаем имена заменяемым параметрам-----------------------
In [24]: '{ip}/{mask}'.format(mask=24, ip='10.1.1.1')
Out[24]: '10.1.1.1/24'

In [27]: '{1}/{0}'.format(24, '10.1.1.1')
Out[27]: '10.1.1.1/24'


------------Можно не повторять передачу параметров ----------------
In [21]: ip_template = '''
    ...: IP address:
    ...: {0:<8} {1:<8} {2:<8} {3:<8}
    ...: {0:08b} {1:08b} {2:08b} {3:08b}
    ...: '''

In [22]: print(ip_template.format(192, 100, 1, 1))

IP address:
192      100      1        1
11000000 01100100 00000001 00000001

------------------Join Одна строка с разделителем -------------------
In [16]: vlans = ['10', '20', '30']
In [17]: ','.join(vlans)
Out[17]: '10,20,30'

----------------- Генератор списков -------------------------------
In [79]: list2 = ['FastEthernet0/'+ str(i) for i in range(10)]
In [80]: list2
Out[80]: 
['FastEthernet0/0',
 'FastEthernet0/1',
 'FastEthernet0/2',
 'FastEthernet0/3',
 'FastEthernet0/4',
 'FastEthernet0/5',
 'FastEthernet0/6',
 'FastEthernet0/7',
 'FastEthernet0/8',
 'FastEthernet0/9']

In [81]: 

----------------------Добавляем новую пару ключ-значение---------------------
In [4]: london['vendor'] = 'Cisco'
In [5]: print(london)
{'vendor': 'Cisco', 'name': 'London1', 'location': 'London Str'}


------------Метод Get в словаре------------------------
Метод get() запрашивает ключ и, если его нет, вместо ошибки возвращает None.
In [18]: london = {'name': 'London1', 'location': 'London Str', 'vendor': 'Cisco'}
In [19]: print(london.get('ios'))
None
Метод get() позволяет также указывать другое значение вместо None:
In [20]: print(london.get('ios', 'Ooops'))
Ooops

----------словарь keys, values, items -----------------------------------------
In [157]: london.keys()
Out[157]: dict_keys(['name', 'location', 'vendor', 'n'])

In [158]: london.values()
Out[158]: dict_values(['London1', 'London Str', 'Cisco', None])

In [159]: london.items()
Out[159]: dict_items([('name', 'London1'), ('location', 'London Str'), ('vendor', 'Cisco'), ('n', None)])


